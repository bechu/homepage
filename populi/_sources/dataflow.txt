En savoir plus sur les *flow*
=============================

Un peu à la manière d'`ecto <http://plasmodic.github.io/ecto/>`, le dataflow
développé est un graphe acyclique contenant des cellules appellées processus.
Chaque processus prossède des entrées et des sorties. Il est nécessaire de
**chainer** ceux-ci pour obtenir un flot de données.

Ce dataflow est conçu pour avoir différentes entrées (comme un flux de caméra
par exemple), qui subiront des opérations et seront transformés en diverses sorties.

  * **Process** : Un process est une classe possédant des entrées, sorties et paramètres, chacun des trois étant typé. Le process effectue des opérations sur les entrées et paramètres en fournissant les sorties.
  * **Port** : Un port est une entrée ou sortie. Si c'est une sortie, il est alloué tandis que si c'est une entrée c'est un pointeur *null*.
  * **Parameters** : Un paramètre permet de configurer un process.

Chaque process hérite d'une interface :

.. code-block:: cpp

  virtual void setup() = 0;

  virtual bool initialize() = 0;

  virtual bool run() = 0;

  virtual void finalize() = 0;


Code
----
Voici comment écrire un process. Celui que nous allons écrire pour l'exemple : prend en entrée un range de chiffre (des entiers) et génère un nombre aléatoire,
en se basant sur ces entrées.

.. literalinclude:: code/kinav_dataflow_example.cpp
  :language: cpp


Voici le résultat::

  [Inf:00000000] (main.cpp:Run:37) -> 2.58801e-30

  [Inf:00000000] (main.cpp:Run:37) -> 4.17223e-30

  [Inf:00000000] (main.cpp:Run:37) -> 4.4294e-30

  [Inf:00000000] (main.cpp:Run:37) -> 5.28772e-30
